- name: Checkout
  uses: actions/checkout@v4
name: 'Terraform Apply'

on:
  workflow_dispatch:
    inputs:
      module:
        type: choice
        description: "Select which module to deploy"
        options: 
        - module-1
        - module-2
        required: true

permissions: write-all

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set Account ID
      id: account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
        echo "Account ID: $ACCOUNT_ID"

    - name: Check previous AWSGoat Deployment
      id: check 
      run: |
        echo "Checking for previous deployment..."
        aws s3api head-object --bucket do-not-delete-awsgoat-state-files-${{ env.ACCOUNT_ID }} --key terraform.tfstate || echo "No previous deployment found"
      continue-on-error: true

    - name: Exit if previous deployment exists
      if: steps.check.outcome == 'success'
      run: |
        echo "A Previous AWSGoat deployment exists, run the Terraform Destroy Action"
        exit 1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Check Terraform and AWS CLI installation
      run: |
        terraform -version
        aws --version

    - name: Terraform Init
      run: | 
        cd modules/${{ github.event.inputs.module }}
        terraform init 
        if [ $? -ne 0 ]; then
          echo "Terraform init failed"
          exit 1
        fi
        
    - uses: actions/setup-python@v4
      with:
        python-version: 3

    - name: Install boto3
      run: |
        pip install boto3
    
    - name: Terraform Plan
      id: plan 
      run: | 
        cd modules/${{ github.event.inputs.module }}
        terraform plan -input=false
        if [ $? -ne 0 ]; then
          echo "Terraform plan failed"
          exit 1
        fi
      continue-on-error: false
      
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      run: | 
        cd modules/${{ github.event.inputs.module }}
        terraform apply -auto-approve -input=false
        if [ $? -ne 0 ]; then
          echo "Terraform apply failed"
          exit 1
        fi
      continue-on-error: false

    - name: Copy terraform.tfstate file to s3 bucket
      if: always()
      run: |
        cd modules/${{ github.event.inputs.module }}
        aws s3 cp ./terraform.tfstate s3://do-not-delete-awsgoat-state-files-${{ env.ACCOUNT_ID }}/terraform.tfstate 
        if [ $? -ne 0 ]; then
          echo "Failed to copy terraform.tfstate to S3"
          exit 1
        fi

    - name: Application URL
      run: |
        cd modules/${{ github.event.inputs.module }}
        terraform output
        if [ $? -ne 0 ]; then
          echo "Terraform output failed"
          exit 1
        fi
